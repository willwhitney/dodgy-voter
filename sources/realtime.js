// Generated by CoffeeScript 1.3.3
(function() {

  window.vote_lock = false;

  $(function() {
    var addSubmissionToPage, buildPage, buildRow, dedownvote, deupvote, socket;
    window.submissions = [];
    socket = io.connect("http://localhost:8001");
    socket.on("listing", function(data) {
      console.log(data);
      window.submissions = data;
      return buildPage();
    });
    socket.on('new-submission', function(submission) {
      var s, _i, _len, _ref;
      _ref = window.submissions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        if (s.id === submission.id) {
          return;
        }
      }
      window.submissions.push(submission);
      return addSubmissionToPage(submission);
    });
    socket.on('update', function(submission) {
      var s, _i, _len, _ref;
      _ref = window.submissions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        if (s.id === submission.id) {
          window.submissions.splice(window.submissions.indexOf(s), 1);
          window.submissions.push(submission);
        }
      }
      console.log("update received");
      console.log(window.submissions);
      return buildPage();
    });
    socket.on('error', function(data) {
      console.error("Error received: ");
      console.error(data);
      return alert("An error occurred. Please reload.");
    });
    buildPage = function() {
      var submission, _i, _len, _ref;
      window.vote_lock = true;
      $('#submission-list').empty();
      window.submissions.sort(function(a, b) {
        return -1 * ((a.upvotes - a.downvotes) - (b.upvotes - b.downvotes));
      });
      _ref = window.submissions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        submission = _ref[_i];
        addSubmissionToPage(submission);
      }
      return setTimeout(function() {
        return window.vote_lock = false;
      }, 1000);
    };
    addSubmissionToPage = function(submission) {
      console.log("about to add: ");
      console.log(submission);
      $('#submission-list').append(buildRow(submission));
      $("body").timeago();
      return window.createCallbacks();
    };
    buildRow = function(submission) {
      var downvoted_selected_string, upvoted_selected_string;
      upvoted_selected_string = "";
      downvoted_selected_string = "";
      if ((window.votes[submission.id] != null) && window.votes[submission.id] > 0) {
        upvoted_selected_string = " selected";
      } else if ((window.votes[submission.id] != null) && window.votes[submission.id] < 0) {
        downvoted_selected_string = " selected";
      }
      return "<li id='" + submission.id + "' class=\"submission-row\">\n<div class=\"arrows\">\n  <div class='up-arrow" + upvoted_selected_string + "'></div>\n<div class=\"score\">" + (submission.upvotes - submission.downvotes) + "</div>\n<div class='down-arrow" + downvoted_selected_string + "'></div>\n</div>\n<div class=\"submission-title\">" + submission.title + "</div>\n</li>";
    };
    deupvote = function(submission) {
      return socket.emit('deupvote', submission);
    };
    dedownvote = function(submission) {
      return socket.emit('dedownvote', submission);
    };
    window.upvote = function(submission) {
      if ((window.votes[submission.id] != null) && window.votes[submission.id] < 0) {
        dedownvote(submission);
      }
      window.votes[submission.id] = 1;
      window.localStorage['votes'] = JSON.stringify(window.votes);
      return socket.emit('upvote', submission);
    };
    window.downvote = function(submission) {
      if ((window.votes[submission.id] != null) && window.votes[submission.id] > 0) {
        deupvote(submission);
      }
      window.votes[submission.id] = -1;
      window.localStorage['votes'] = JSON.stringify(window.votes);
      return socket.emit('downvote', submission);
    };
    return window.submit = function(submission_title) {
      return socket.emit('submit', {
        title: submission_title
      });
    };
  });

}).call(this);
